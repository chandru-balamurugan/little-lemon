@file:OptIn(ExperimentalMaterial3Api::class)package com.philomath.littlelemonimport android.content.Contextimport androidx.compose.foundation.BorderStrokeimport androidx.compose.foundation.Imageimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.fillMaxHeightimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material3.Buttonimport androidx.compose.material3.ButtonDefaultsimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.OutlinedTextFieldimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.navigation.NavHostController@ExperimentalMaterial3Api@Composablefun ProfileScreen(navController: NavHostController) {      val context = LocalContext.current      val prefs = context.getSharedPreferences(context.packageName, Context.MODE_PRIVATE)      val firstName = prefs.getString("firstName", "")      val secondName = prefs.getString("secondName", "")      val email = prefs.getString("email", "")      Column(            modifier = Modifier                  .padding(12.dp)                  .fillMaxHeight(),            verticalArrangement = Arrangement.SpaceBetween,            horizontalAlignment = Alignment.CenterHorizontally      ) {            Column {                  Image(                        painter = painterResource(id = R.drawable.logo),                        contentDescription = "Little Lemon",                        modifier = Modifier.align(alignment = Alignment.CenterHorizontally)                  )                  Text(                        text = "Personal Information",                        modifier = Modifier                              .align(alignment = Alignment.CenterHorizontally)                              .padding(12.dp)                  )                  Column(                        horizontalAlignment = Alignment.Start,                        modifier = Modifier.padding(12.dp)                  ) {                        Text(text = "First Name")                        OutlinedTextField(                              value = firstName.toString(),                              onValueChange = {},                              readOnly = true,                              modifier = Modifier.fillMaxWidth()                        )                  }                  Column(                        horizontalAlignment = Alignment.Start,                        modifier = Modifier.padding(horizontal = 12.dp)                  ) {                        Text(text = "Second Name")                        OutlinedTextField(                              value = secondName.toString(),                              onValueChange = {},                              readOnly = true,                              modifier = Modifier.fillMaxWidth()                        )                  }                  Column(                        horizontalAlignment = Alignment.Start,                        modifier = Modifier                              .padding(12.dp)                              .fillMaxWidth()                  ) {                        Text(text = "Email")                        OutlinedTextField(                              value = email.toString(),                              onValueChange = {},                              readOnly = true,                              modifier = Modifier.fillMaxWidth()                        )                  }            }            Button(                  onClick = {                        prefs.edit().clear().commit()                        navController.navigate(Onboarding.route)                  },                  colors = ButtonDefaults.buttonColors(                        containerColor = Color.Yellow,                        contentColor = Color.Black                  ),                  shape = RoundedCornerShape(15.dp),                  border = BorderStroke(1.dp, Color.Black),                  elevation = ButtonDefaults.elevatedButtonElevation(                        defaultElevation = 10.dp,                        pressedElevation = 15.dp,                        disabledElevation = 0.dp                  ),                  modifier = Modifier                        .align(alignment = Alignment.CenterHorizontally)                        .fillMaxWidth()                        .padding(12.dp)            ) {                  Text(text = "Log Out")            }      }}