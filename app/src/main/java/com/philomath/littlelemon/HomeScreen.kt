package com.philomath.littlelemonimport android.R.attr.labelimport android.R.attr.valueimport android.graphics.drawable.shapes.Shapeimport android.widget.EditTextimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.borderimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.layout.wrapContentHeightimport androidx.compose.foundation.layout.wrapContentWidthimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Searchimport androidx.compose.material3.Iconimport androidx.compose.material3.OutlinedTextFieldimport androidx.compose.material3.OutlinedTextFieldDefaultsimport androidx.compose.material3.Textimport androidx.compose.material3.TextFieldimport androidx.compose.material3.TextFieldColorsimport androidx.compose.material3.TextFieldDefaultsimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.res.stringResourceimport androidx.compose.ui.text.input.TextFieldValueimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.navigation.NavHostControllerimport com.philomath.littlelemon.ui.theme.greenimport com.philomath.littlelemon.ui.theme.yellowimport com.philomath.littlelemon.ui.theme.cloud@Composablefun HomeScreen(navController: NavHostController) {      Column {            AppBar(navController)            HeroSection()            /// TODO remaining UI (menuItems vertical List and category horizontal list)      }}@Composablefun AppBar(navController: NavHostController) {      Row(            horizontalArrangement = Arrangement.Center,            verticalAlignment = Alignment.CenterVertically,            modifier = Modifier                  .padding(12.dp)                  .fillMaxWidth()      ) {            Box(                  modifier = Modifier.fillMaxWidth(0.6f),                  contentAlignment = Alignment.CenterEnd            ) {                  Image(                        painter = painterResource(id = R.drawable.logo),                        contentDescription = "Little Lemon"                  )            }            Box(                  modifier = Modifier.fillMaxWidth(1f),                  contentAlignment = Alignment.CenterEnd            ) {                  Image(                        modifier = Modifier                              .clickable {                                    navController.navigate(Profile.route)                              }                              .size(40.dp)                              .clip(CircleShape)                              .border(1.dp, Color.Transparent, CircleShape),                        painter = painterResource(id = R.drawable.profile),                        contentDescription = "Little Lemon"                  )            }      }}@Composablefun HeroSection() {      var searchText by remember { mutableStateOf(TextFieldValue("")) }      val imageModifier = Modifier            .size(150.dp)//            .aspectRatio(10f/9f)            .clip(RoundedCornerShape(12.dp))      Box(            Modifier                  .background(color = green)                  .fillMaxWidth()                  .padding(12.dp)      ) {            Column(modifier = Modifier.fillMaxWidth()) {                  Text(text = stringResource(R.string.app_name), color = yellow, fontSize = 40.sp)                  Row(                        modifier = Modifier.fillMaxWidth(),                        horizontalArrangement = (Arrangement.SpaceBetween)                  ) {                        Column(modifier = Modifier.fillMaxWidth(0.5f)) {                              Text(                                    text = stringResource(R.string.app_city),                                    color = cloud,                                    fontSize = 32.sp                              )                              Text(                                    modifier = Modifier.padding(top = 12.dp),                                    text = stringResource(R.string.app_description),                                    color = cloud,                                    fontSize = 12.sp                              )                        }                        Image(                              modifier = imageModifier,                              painter = painterResource(R.drawable.hero_image),                              contentDescription = "Hero Image",                              contentScale = ContentScale.Crop                        )                  }                  Spacer(Modifier.height(14.dp))//                  Box(//                        modifier = Modifier//                              .background(cloud)//                              .wrapContentWidth()//                              .wrapContentHeight()//                  ) {                  TextField(                        shape = RoundedCornerShape(12.dp),                        colors = TextFieldDefaults.colors(cloud),                        value = searchText,                        leadingIcon = {                              Icon(                                    imageVector = Icons.Default.Search,                                    contentDescription = null                              )                        },                        label = { Text(text = "Enter search phrase") },                        onValueChange = { searchText = it },                        modifier = Modifier.fillMaxWidth()                  )//                  }            }      }}